# MothersMaidenNameRecognizer.py

from presidio_analyzer import PatternRecognizer, Pattern

class MothersMaidenNameRecognizer(PatternRecognizer):
    CONTEXT_WORDS = [
        "mother's maiden name", "maiden name", "mother's name", "mother maiden name", "mothers name"
    ]

    def __init__(self):
        # There isn't a specific pattern for names, so we use a generic name pattern with low score
        patterns = [
            Pattern(name='maiden_name', regex=r'\b[A-Za-z]+(?:\s[A-Za-z]+)*\b', score=0.6)
        ]
        super().__init__(supported_entity="MOTHERS_MAIDEN_NAME", patterns=patterns)

    def analyze(self, text, entities, nlp_artifacts=None):
        results = super().analyze(text, entities, nlp_artifacts)
        filtered_results = []

        for result in results:
            context_found = False
            # Check for context words around the name
            window_start = max(0, result.start - 20)
            window_end = min(len(text), result.end + 20)
            context_window = text[window_start:window_end].lower()

            for context_word in self.CONTEXT_WORDS:
                if context_word in context_window:
                    context_found = True
                    break

            if context_found:
                filtered_results.append(result)

        return filtered_results
