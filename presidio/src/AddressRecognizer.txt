# IndianAddressRecognizer.py

from presidio_analyzer import PatternRecognizer, Pattern
import re

class AddressRecognizer(PatternRecognizer):
    CONTEXT_WORDS = [
        "street", "st", "road", "rd", "avenue", "ave", "boulevard", "blvd", "lane", "ln",
        "drive", "dr", "court", "ct", "circle", "cir", "place", "pl", "terrace", "ter",
        "highway", "hwy", "parkway", "pkwy", "square", "sq", "trail", "trl", "way", "wy",
        "building", "bldg", "apartment", "apt", "suite", "ste", "unit", "floor", "fl", "room", "rm", "complex", "block",
        "city", "town", "village", "state", "province", "territory", "district", "county",
        "pincode", "pin code", "postal code", "post code", "po box", "p.o. box", "zip", "zone",
        "near", "next to", "beside", "adjacent to", "opposite", "opposite to", "behind", "in front of", "close to", "region", "sector", "area", "neighborhood", "locality",
        "address", "location", "residence", "home", "office", "headquarters", "HQ", "branch", "outlet", "campus", "site", "premises"
    ]

    def __init__(self):
        patterns = [
            # Generic address pattern (simple approximation)
            Pattern(name='address', regex=r'\b\d{1,5}\s\w+(\s\w+){1,4}\b', score=0.5),
            # Indian Pincode pattern
            Pattern(name='indian_pincode', regex=r'\b[1-9][0-9]{5}\b', score=0.5),
            # Indian state abbreviations and names (example, extend as needed)
            Pattern(name='indian_state', regex=r'\b(AN|AP|AR|AS|BR|CH|CT|DL|GA|GJ|HR|HP|JK|JH|KA|KL|LD|MP|MH|MN|ML|MZ|NL|OR|PB|PY|RJ|SK|TN|TG|TR|UP|UK|WB|Andhra Pradesh|Arunachal Pradesh|Assam|Bihar|Chandigarh|Chhattisgarh|Delhi|Goa|Gujarat|Haryana|Himachal Pradesh|Jammu and Kashmir|Jharkhand|Karnataka|Kerala|Ladakh|Madhya Pradesh|Maharashtra|Manipur|Meghalaya|Mizoram|Nagaland|Odisha|Punjab|Puducherry|Rajasthan|Sikkim|Tamil Nadu|Telangana|Tripura|Uttar Pradesh|Uttarakhand|West Bengal)\b', score=0.5)
        ]
        super().__init__(supported_entity="ADDRESS", patterns=patterns)

    def analyze(self, text, entities, nlp_artifacts=None):
        results = super().analyze(text, entities, nlp_artifacts)
        
        # Extracting matches for each pattern
        address_results = [result for result in results if result.entity_type == 'address']
        pincode_results = [result for result in results if result.entity_type == 'indian_pincode']
        state_results = [result for result in results if result.entity_type == 'indian_state']
        
        filtered_results = []
        
        # Check if patterns are close to each other
        for address in address_results:
            for pincode in pincode_results:
                if abs(address.start - pincode.end) <= 50 or abs(address.end - pincode.start) <= 50:
                    for state in state_results:
                        if (abs(pincode.start - state.end) <= 50 or abs(pincode.end - state.start) <= 50) and \
                           (abs(address.start - state.end) <= 50 or abs(address.end - state.start) <= 50):
                            filtered_results.append(address)
                            filtered_results.append(pincode)
                            filtered_results.append(state)
                            break
        
        return filtered_results
