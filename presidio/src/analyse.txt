from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from presidio_analyzer import AnalyzerEngine, PatternRecognizer, RecognizerRegistry, EntityRecognizer
import logging
import re
from presidio_analyzer.predefined_recognizers import InAadhaarRecognizer

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
# Add the custom recognizer to the analyzer
class newInAadhaarRecognizer(InAadhaarRecognizer):

        def validate_result(self, pattern_text: str) -> bool:
            return None

# Initialize FastAPI app
app = FastAPI()




recognizers = analyzer.get_recognizers()

# Finding the one which supports US_PASSPORT

aadhar_recognizer = [rec for rec in recognizers if "IN_AADHAAR" in rec.supported_entities][0]
aadhar_recognizer.context.append("number")
aadhar_recognizer.context.append("Number")
aadhar_recognizer.context.append("Aadhar")
aadhar_recognizer.context.append("Uidai")
print(aadhar_recognizer.context)


analyzer.registry.remove_recognizer("InAadhaarRecognizer")
analyzer.registry.add_recognizer(newInAadhaarRecognizer())


class TextRequest(BaseModel):
    text: str
ENTITIES = ["PERSON","EMAIL_ADDRESS","LOCATION","PHONE_NUMBER","AADHAAR"]
analyzer = AnalyzerEngine()
# Define endpoint to analyze text
@app.post("/analyze/")
async def analyze_text(text_request: TextRequest):
    try:
        # Analyze the text using Presidio
        # The current assumption is the data is in English for this study
        analysis_results = analyzer.analyze(text=text_request.text, 
                                            language='en' ,entities=ENTITIES)
        print(analysis_results)
        # Return analysis results
        return analysis_results
        
    except Exception as e:
        # Return HTTP 500 Internal Server Error on exception
        logger.error("Error processing request: %s", e)
        raise HTTPException(status_code=500, detail=str(e))

# # Run the FastAPI app
# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="0.0.0.0", port=8000)
